{"version":3,"sources":["Main/welcome.js","Main/home.js","App.js","serviceWorker.js","store/reducers/index.js","store/reducers/Store.js","index.js","store/configureStore.js"],"names":["connect","state","store","dispatch","props","useState","screen","setScreen","link","setLink","formik","useFormik","initialValues","address","validate","values","errors","name","onSubmit","resetForm","data","base_url","window","location","origin","protocol","host","console","log","fetch","method","headers","body","JSON","stringify","then","res","json","url","msg","nameClassList","touched","className","autoComplete","id","href","target","type","onClick","copy","handleSubmit","join","placeholder","autoFocus","value","onChange","handleChange","onBlur","handleBlur","disabled","isSubmitting","Home","Component","App","React","Boolean","hostname","match","combineReducers","action","payload","messageList","phone","email","isScreenOne","isAuth","sessionId","routing","routerReducer","baseUrl","document","getElementsByTagName","getAttribute","history","initialState","middleware","thunk","routerMiddleware","enhancers","rootReducer","reducers","createStore","compose","applyMiddleware","configureStore","createBrowserHistory","basename","initialReduxState","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.68f06777.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./bootstrap.css\";\r\nimport \"./main.css\";\r\nimport \"./fontawesome.min.css\";\r\nimport { useFormik } from \"formik\";\r\nimport copy from \"copy-to-clipboard\";\r\n\r\nconst Welcome = (props) => {\r\n  const [screen, setScreen] = useState(false);\r\n  const [link, setLink] = useState(\"\");\r\n\r\n  function validate(values) {\r\n    const errors = {};\r\n    if (!values.address) {\r\n      errors.name = \"Required\";\r\n    }\r\n    return errors;\r\n  }\r\n\r\n  function submitForm(values, { resetForm }) {\r\n    let data = {\r\n      address: values.address\r\n    };\r\n\r\n    let base_url = window.location.origin\r\n      ? window.location.origin + '/'\r\n      : window.location.protocol + '/' + window.location.host + '/';\r\n    console.log(base_url)\r\n\r\n    fetch('/', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json;charset=utf-8'\r\n      },\r\n      body: JSON.stringify(data)\r\n    }).then(res => res.json()).then(res => {\r\n      //let url = `http://localhost:8000/${res.msg}`;\r\n      let url = base_url + res.msg\r\n      resetForm({ values: \"\" })\r\n      setLink(url);\r\n      setScreen(true)\r\n    })\r\n  }\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      address: \"\",\r\n    },\r\n    validate,\r\n    onSubmit: submitForm,\r\n  });\r\n\r\n  function handleCancel() {\r\n    copy(link)\r\n    setScreen(false)\r\n  }\r\n\r\n  let nameClassList = [\r\n    \"form-control\",\r\n    \"main-input\",\r\n    formik.errors.address && formik.touched.address ? \"redbd\" : null,\r\n  ];\r\n\r\n  return (\r\n    <div className=\"home\">\r\n      <section className=\"hero\">\r\n        <div className=\"text-section\">\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-10 col-sm-12\">\r\n                <div className=\"promo\">\r\n                  <h1>STORD URL Shortener</h1>\r\n                  <p className=\"description\">This is a demo to convert domain url to shortened url.</p>\r\n                </div>\r\n                {screen ?\r\n                  <div className=\"ajax\">\r\n                    <div className=\"alert alert-success no-round\">URL has been successfully shortened</div>\r\n                    <form autoComplete='off' id=\"main-form\">\r\n                      <div className=\"main-form\">\r\n                        <div className=\"row\">\r\n                          <div className=\"col-sm-10\">\r\n                            <div className=\"input-group\">\r\n                              <div className=\"success\"><a href={link} target=\"_blank\" id=\"url\">{link}</a></div>\r\n                            </div>\r\n                          </div>\r\n                          <div className=\"col-sm-2\">\r\n                            <button\r\n                              type=\"submit\"\r\n                              onClick={handleCancel}\r\n                              className=\"btn btn-primary btn-block main-button\"\r\n                            >copy</button>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"main-options clearfix\"></div>\r\n                    </form>\r\n                  </div>\r\n                  :\r\n\r\n                  <form onSubmit={formik.handleSubmit} autoComplete='off' id=\"main-form\">\r\n                    <div className=\"main-form\">\r\n                      <div className=\"row\">\r\n                        <div className=\"col-sm-8 col-lg-10\">\r\n                          <div className=\"input-group\">\r\n                            <input\r\n                              className={nameClassList.join(\" \")}\r\n                              name=\"address\"\r\n                              type=\"text\"\r\n                              placeholder=\"Paste a long url\"\r\n                              autoFocus\r\n                              value={formik.values.address}\r\n                              onChange={formik.handleChange}\r\n                              onBlur={formik.handleBlur}\r\n                            />\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"col-sm-4 col-lg-2\">\r\n                          <button\r\n                            type=\"submit\"\r\n                            className=\"btn btn-primary btn-block main-button\"\r\n                            disabled={formik.isSubmitting}\r\n                          >shorten</button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"main-options clearfix\"></div>\r\n                  </form>}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    store: state.store,\r\n  };\r\n};\r\nexport default connect(mapStateToProps, (dispatch) => ({ dispatch }))(Welcome);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Welcome from \"./welcome\";\r\nimport \"./main.css\";\r\n\r\nclass Home extends Component {\r\n  render() {\r\n    return (\r\n      <Welcome />\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    store: state.store,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, (dispatch) => ({ dispatch }))(Home);\r\n","import React from \"react\";\nimport \"./App.css\";\nimport \"./styles\";\nimport Home from \"./Main/home\";\n\nexport default class App extends React.Component {\n  render() {\n    return <Home />;\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from \"redux\";\r\nimport { routerReducer } from \"react-router-redux\";\r\nimport Store from \"./Store\";\r\n\r\nexport default combineReducers({\r\n  store: Store,\r\n  routing: routerReducer,\r\n});\r\n","export default (state, action) => {\r\n  switch (action.type) {\r\n    case \"UPDATESTATE\":\r\n      return { ...state, [action.payload.name]: action.payload.value };\r\n    case \"UPDATELIST\":\r\n      return {\r\n        ...state,\r\n        messageList: [...state.messageList, action.payload.value],\r\n      };\r\n    default:\r\n      return (\r\n        state || {\r\n          name: \"\",\r\n          phone: \"\",\r\n          email: \"\",\r\n          isScreenOne: true,\r\n          messageList: [],\r\n          isAuth: false,\r\n          sessionId: null\r\n        }\r\n      );\r\n  }\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { createBrowserHistory } from \"history\";\nimport configureStore from \"./store/configureStore\";\n\n// Create browser history to use in the Redux store\nconst baseUrl = document.getElementsByTagName(\"base\")[0].getAttribute(\"href\");\nconst history = createBrowserHistory({ basename: baseUrl });\n\n// Get the application-wide store instance, prepopulating with state from the server where available.\nconst initialState = window.initialReduxState;\nconst store = configureStore(history, initialState);\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.register();\n","import { applyMiddleware, compose, createStore } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { routerMiddleware } from 'react-router-redux';\r\nimport reducers from './reducers';\r\n\r\nexport default function configureStore(history, initialState) {\r\n  \r\n\r\n  const middleware = [\r\n    thunk,\r\n    routerMiddleware(history)\r\n  ];\r\n\r\n  // In development, use the browser's Redux dev tools extension if installed\r\n  const enhancers = [];\r\n  const isDevelopment = process.env.NODE_ENV === 'development';\r\n  if (isDevelopment && typeof window !== 'undefined' && window.devToolsExtension) {\r\n    enhancers.push(window.devToolsExtension());\r\n  }\r\n\r\n  const rootReducer = reducers;\r\n\r\n  return createStore(\r\n    rootReducer,\r\n    initialState,\r\n    compose(applyMiddleware(...middleware), ...enhancers)\r\n  );\r\n}\r\n"],"sourceRoot":""}